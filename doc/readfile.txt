readfile -- 输出一个文件

  int readfile(string filename [, bool use_include_path [, resource context]])~

读入一个文件并写入到输出缓冲。

{filename} 要读取的文件名。

{use_include_path} 如果也想在 include_path
中搜索文件，可以使用可选的第二个参数并将其设为 TRUE。

{context} A context stream resource.

返回从文件中读入的字节数。如果出错返回 FALSE
并且除非是以 @|readfile| 形式调用，否则会显示错误信息。

Forcing a download using |readfile|

<?php >
  $file = 'monkey.gif';
  
  if (file_exists($file)) {
      header('Content-Description: File Transfer');
      header('Content-Type: application/octet-stream');
      header('Content-Disposition: attachment; filename='.basename($file));
      header('Content-Transfer-Encoding: binary');
      header('Expires: 0');
      header('Cache-Control: must-revalidate');
      header('Pragma: public');
      header('Content-Length: ' . filesize($file));
      ob_clean();
      flush();
      readfile($file);
      exit;
  }
?>

The above example will output something similar to:

Open / Save dialogue



|readfile| will not present any memory issues, even when sending large files,
on its own. If you encounter an out of memory error ensure that output
buffering is off with |ob_get_level|.

A URL can be used as a filename with this function if the fopen wrappers have
been enabled. See |fopen| for more details on how to specify the filename. See
the for links to information about what abilities the various wrappers have,
notes on their usage, and information on any predefined variables they may
provide.

Context support was added with PHP 5.0.0. For a description of contexts, refer
to .

|fpassthru| |file| |fopen| |include| |require| |virtual| |file_get_contents|

vim:ft=help:
