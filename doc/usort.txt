usort -- 使用用户自定义的比较函数对数组中的值进行排序

  bool usort(array array, callable cmp_function)~

本函数将用用户自定义的比较函数对一个数组中的值进行排序。如果要排序的数组需要用一种不寻常的标准进行排序，那么应该使用此函数。

如果两个成员比较结果相同，则它们在排序后的数组中的顺序未经定义。

This function assigns new keys to the elements in {array}. It will remove any
existing keys that may have been assigned, rather than just reordering the
keys.

{array} 输入的数组

{cmp_function} The comparison function must return an integer less than, equal
to, or greater than zero if the first argument is considered to be
respectively less than, equal to, or greater than the second.

  int (array array, callable cmp_function, mixed a, mixed b)~

Returning non-integer values from the comparison function, such as float, will
result in an internal cast to integer of the callback's return value. So
values such as 0.99 and 0.1 will both be cast to an integer value of 0, which
will compare such values as equal.

Returns TRUE on success or &false; on failure.

Version Description 4.1.0 引进了新的排序算法。用户自定义函数
{cmp_function} 将不再保留这些单元的原有顺序。

|usort| 例子

<?php >
  function cmp($a, $b)
  {
      if ($a == $b) {
          return 0;
      }
      return ($a < $b) ? -1 : 1;
  }
  
  $a = array(3, 2, 5, 6, 1);
  
  usort($a, "cmp");
  
  foreach ($a as $key => $value) {
      echo "$key: $value\n";
  }
?>

The above example will output:

  0: 1
  1: 2
  2: 3
  3: 5
  4: 6



很明显在这个小例子中用 |sort| 函数更合适。

使用多维数组的 |usort| 例子

<?php >
  function cmp($a, $b)
  {
      return strcmp($a["fruit"], $b["fruit"]);
  }
  
  $fruits[0]["fruit"] = "lemons";
  $fruits[1]["fruit"] = "apples";
  $fruits[2]["fruit"] = "grapes";
  
  usort($fruits, "cmp");
  
  while (list($key, $value) = each($fruits)) {
      echo "$fruits[$key]: " . $value["fruit"] . "\n";
  }
?>

当排序多维数组时，$a 和 $b
包含到数组第一个索引的引用。

The above example will output:

  $fruits[0]: apples
  $fruits[1]: grapes
  $fruits[2]: lemons



|usort| example using a member function of an object

<?php >
  class TestObj {
      var $name;
  
      function TestObj($name)
      {
          $this->name = $name;
      }
  
      /* This is the static comparing function: */
      static function cmp_obj($a, $b)
      {
          $al = strtolower($a->name);
          $bl = strtolower($b->name);
          if ($al == $bl) {
              return 0;
          }
          return ($al > $bl) ? +1 : -1;
      }
  }
  
  $a[] = new TestObj("c");
  $a[] = new TestObj("b");
  $a[] = new TestObj("d");
  
  usort($a, array("TestObj", "cmp_obj"));
  
  foreach ($a as $item) {
      echo $item->name . "\n";
  }
?>

The above example will output:

  b
  c
  d

|usort| example using a closure to sort a multi-dimensional array

<?php >
  $array[0] = array('key_a' => 'z', 'key_b' => 'c');
  $array[1] = array('key_a' => 'x', 'key_b' => 'b');
  $array[2] = array('key_a' => 'y', 'key_b' => 'a');
  
  function build_sorter($key) {
      return function ($a, $b) use ($key) {
          return strnatcmp($a[$key], $b[$key]);
      };
  }
  
  usort($array, build_sorter('key_b'));
  
  foreach ($array as $item) {
      echo $item['key_a'] . ', ' . $item['key_b'] . "\n";
  }
?>

The above example will output:

  y, a
  x, b
  z, c



|uasort| The comparison of array sorting functions

vim:ft=help:
