file -- 把整个文件读入一个数组中

  array file(string filename [, int flags [, resource context]])~

把整个文件读入一个数组中。

你可以通过 |file_get_contents| 以字符串形式获取文件的内容。

{filename} 文件的路径。

A URL can be used as a filename with this function if the fopen wrappers have
been enabled. See |fopen| for more details on how to specify the filename. See
the for links to information about what abilities the various wrappers have,
notes on their usage, and information on any predefined variables they may
provide.

{flags} 可选参数 {flags} 可以是以下一个或多个常量：
FILE_USE_INCLUDE_PATH 在 include_path 中查找文件。

FILE_IGNORE_NEW_LINES 在数组每个元素的末尾不要添加换行符

FILE_SKIP_EMPTY_LINES 跳过空行

{context} A context resource created with the |stream_context_create|
function.

Context support was added with PHP 5.0.0. For a description of contexts, refer
to .



Returns the file in an array. Each element of the array corresponds to a line
in the file, with the newline still attached. Upon failure, |file| returns
FALSE.

Each line in the resulting array will include the line ending, unless
FILE_IGNORE_NEW_LINES is used, so you still need to use |rtrim| if you do not
want the line ending present.

If PHP is not properly recognizing the line endings when reading files either
on or created by a Macintosh computer, enabling the auto_detect_line_endings
run-time configuration option may help resolve the problem.

Version Description 5.0.0 增加了参数 {context} 5.0.0 Prior to PHP 5.0.0
the {flags} parameter only covered include_path and was enabled with 1 4.3.0
|file| 开始是二进制安全的

|file| 例子

<?php >
  // 将一个文件读入数组。本例中通过 HTTP 从 URL 中取得 HTML 源文件。
  
  $lines = file('http://www.example.com/');
  
  // 在数组中循环，显示 HTML 的源文件并加上行号。
  
  foreach ($lines as $line_num => $line) {
      echo "Line #<b>{$line_num}</b> : " . htmlspecialchars($line) . "<br />\n";
  }
  
  // 另一个例子将 web 页面读入字符串。参见 file_get_contents()。
  
  $html = implode('', file('http://www.example.com/'));
  
  // 从 PHP 5 开始可以使用可选标记参数
  $trimmed = file('somefile.txt', FILE_IGNORE_NEW_LINES | FILE_SKIP_EMPTY_LINES);
?>





When using SSL, Microsoft IIS will violate the protocol by closing the
connection without sending a close_notify indicator. PHP will report this as
"SSL: Fatal Protocol Error" when you reach the end of the data. To work around
this, the value of error_reporting should be lowered to a level that does not
include warnings. PHP 4.3.7 and higher can detect buggy IIS server software
when you open the stream using the https:// wrapper and will suppress the
warning. When using |fsockopen| to create an ssl:// socket, the developer is
responsible for detecting and suppressing this warning.

|readfile| |fopen| |fsockopen| |popen| |file_get_contents| |include|
|stream_context_create|

vim:ft=help:
