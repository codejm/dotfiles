localtime -- 取得本地时间

  array localtime([int timestamp [, bool is_associative]])~

|localtime| 函数返回一个数组，其结构和 C
函数调用返回的完全一样。

{timestamp} The optional {timestamp} parameter is an integer Unix timestamp
that defaults to the current local time if a {timestamp} is not given. In
other words, it defaults to the value of |time|.

{is_associative} 如果设为 FALSE
或未提供则返回的是普通的数字索引数组。如果该参数设为
TRUE 则 |localtime| 函数返回包含有所有从 C 的 localtime
函数调用所返回的不同单元的关联数组。关联数组中不同的键名为：

"tm_sec" - 秒数， 0 到 59

"tm_min" - 分钟数， 0 到 59

"tm_hour" - 小时， 0 到 23

"tm_mday" - 月份中的第几日， 1 到 31

"tm_mon" - 年份中的第几个月， 0 (Jan) 到 11 (Dec)

"tm_year" - 年份，从 1900 开始

"tm_wday" - 星期中的第几天， 0 (Sun) 到 6 (Sat)

"tm_yday" - 一年中的第几天， 0 到 365

"tm_isdst" - 夏令时当前是否生效？

如果是生效的是正数， 0 代表未生效，负数代表未知。

Every call to a date/time function will generate a E_NOTICE if the time zone
is not valid, and/or a E_STRICT or E_WARNING message if using the system
settings or the TZ environment variable. See also |date_default_timezone_set|

Version Description 5.1.0 Now issues the E_STRICT and E_NOTICE time zone
errors.

|localtime| 例子

<?php >
  $localtime = localtime();
  $localtime_assoc = localtime(time(), true);
  print_r($localtime);
  print_r($localtime_assoc);
?>

The above example will output something similar to:

  Array
  (
      [0] => 24
      [1] => 3
      [2] => 19
      [3] => 3
      [4] => 3
      [5] => 105
      [6] => 0
      [7] => 92
      [8] => 1
  )
  
  Array
  (
      [tm_sec] => 24
      [tm_min] => 3
      [tm_hour] => 19
      [tm_mday] => 3
      [tm_mon] => 3
      [tm_year] => 105
      [tm_wday] => 0
      [tm_yday] => 92
      [tm_isdst] => 1
  )



|getdate|

vim:ft=help:
