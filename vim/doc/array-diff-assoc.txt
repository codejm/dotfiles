array_diff_assoc -- 带索引检查计算数组的差集

  array array_diff_assoc(array array1, array array2 [, array ...])~

|array_diff_assoc| 返回一个数组，该数组包括了所有在 {array1}
中但是不在任何其它参数数组中的值。注意和 |array_diff|
不同的是键名也用于比较。

{array1} The array to compare from

{array2} An array to compare against

{...} More arrays to compare against

Returns an array containing all the values from {array1} that are not present
in any of the other arrays.

|array_diff_assoc| 例子 上面的例子中可以看到键值对 "a" =>
"green"
在两个数组中都有，因此不在本函数的输出中。与此不同，键值对
0 => "red" 出现在输出中是因为第二个参数中的 "red" 的键名是
1。

<?php >
  $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
  $array2 = array("a" => "green", "yellow", "red");
  $result = array_diff_assoc($array1, $array2);
  print_r($result);
?>

The above example will output:

  Array
  (
      [b] => brown
      [c] => blue
      [0] => red
  )



|array_diff_assoc| example 键值对 key => value 中的两个值仅在
(string) $elem1 === (string) $elem2
时被认为相等。也就是说使用了严格检查，字符串的表达必须相同。

<?php >
  $array1 = array(0, 1, 2);
  $array2 = array("00", "01", "2");
  $result = array_diff_assoc($array1, $array2);
  print_r($result);
?>

The above example will output:

  Array
  (
      [0] => 0
      [1] => 1
      )



注意本函数只检查了多维数组中的一维。当然可以用
array_diff_assoc($array1[0], $array2[0]); 检查更深的维度。

|array_diff| |array_intersect| |array_intersect_assoc|

vim:ft=help:
