fopen -- 打开文件或者 URL

  resource fopen(string filename, string mode [, bool use_include_path [, resource context]])~

|fopen| 将 {filename} 指定的名字资源绑定到一个流上。

{filename} 如果 {filename} 是 "scheme://..." 的格式，则被当成一个
URL，PHP
将搜索协议处理器（也被称为封装协议）来处理此模式。如果该协议尚未注册封装协议，PHP
将发出一条消息来帮助检查脚本中潜在的问题并将 {filename}
当成一个普通的文件名继续执行下去。

如果 PHP 认为 {filename}
指定的是一个本地文件，将尝试在该文件上打开一个流。该文件必须是
PHP
可以访问的，因此需要确认文件访问权限允许该访问。如果激活了safe
mode或者 open_basedir 则会应用进一步的限制。

如果 PHP 认为 {filename}
指定的是一个已注册的协议，而该协议被注册为一个网络
URL，PHP 将检查并确认 allow_url_fopen
已被激活。如果关闭了，PHP 将发出一个警告，而 fopen
的调用则失败。

所支持的协议列表见。某些协议（也被称为 wrappers）支持
context 和／或 php.ini
选项。参见相应的页面哪些选项可以被设定（例如 php.ini
中用于 http wrapper 的 user_agent 值）。

On the Windows platform, be careful to escape any backslashes used in the path
to the file, or use forward slashes.

<?php >
  $handle = fopen("c:\\folder\\resource.txt", "r");
?>

{mode} {mode}
参数指定了所要求到该流的访问类型。可以是以下： |fopen|
中 {mode} 的可能值列表 {mode} 说明 'r'
只读方式打开，将文件指针指向文件头。 'r+'
读写方式打开，将文件指针指向文件头。 'w'
写入方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。
'w+'
读写方式打开，将文件指针指向文件头并将文件大小截为零。如果文件不存在则尝试创建之。
'a'
写入方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。
'a+'
读写方式打开，将文件指针指向文件末尾。如果文件不存在则尝试创建之。
'x'
创建并以写入方式打开，将文件指针指向文件头。如果文件已存在，则
|fopen| 调用失败并返回 FALSE，并生成一条 E_WARNING
级别的错误信息。如果文件不存在则尝试创建之。这和给
底层的 open(2) 系统调用指定 O_EXCL|O_CREAT 标记是等价的。 'x+'
创建并以读写方式打开，其他的行为和 'x' 一样。 'c' Open the
file for writing only. If the file does not exist, it is created. If it
exists, it is neither truncated (as opposed to 'w'), nor the call to this
function fails (as is the case with 'x'). The file pointer is positioned on
the beginning of the file. This may be useful if it's desired to get an
advisory lock (see |flock|) before attempting to modify the file, as using 'w'
could truncate the file before the lock was obtained (if truncation is
desired, |ftruncate| can be used after the lock is requested). 'c+' Open the
file for reading and writing; otherwise it has the same behavior as 'c'.

不同的操作系统家族具有不同的行结束习惯。当写入一个文本文件并想插入一个新行时，需要使用符合操作系统的行结束符号。基于
Unix 的系统使用 \n 作为行结束字符，基于 Windows 的系统使用
\r\n 作为行结束字符，基于 Macintosh 的系统使用 \r
作为行结束字符。

如果写入文件时使用了错误的行结束符号，则其它应用程序打开这些文件时可能会表现得很怪异。

Windows 下提供了一个文本转换标记（'t'）可以透明地将 \n
转换为 \r\n。与此对应还可以使用 'b'
来强制使用二进制模式，这样就不会转换数据。要使用这些标记，要么用
'b' 或者用 't' 作为 {mode} 参数的最后一个字符。

默认的转换模式依赖于 SAPI 和所使用的 PHP
版本，因此为了便于移植鼓励总是指定恰当的标记。如果是操作纯文本文件并在脚本中使用了
\n
作为行结束符，但还要期望这些文件可以被其它应用程序例如
Notepad 读取，则在 mode 中使用 't'。在所有其它情况下使用
'b'。

在操作二进制文件时如果没有指定 'b'
标记，可能会碰到一些奇怪的问题，包括坏掉的图片文件以及关于
\r\n 字符的奇怪问题。

为移植性考虑，强烈建议在用 |fopen| 打开文件时总是使用
'b' 标记。

再一次，为移植性考虑，强烈建议你重写那些依赖于 't'
模式的代码使其使用正确的行结束符并改成 'b' 模式。

{use_include_path} 如果也需要在 include_path
中搜寻文件的话，可以将可选的第三个参数 {use_include_path}
设为 '1' 或 TRUE。

{context} Context support was added with PHP 5.0.0. For a description of
contexts, refer to .

成功时返回文件指针资源，如果打开失败，本函数返回
FALSE。

如果打开失败，会产生一个 E_WARNING 错误。可以通过 @
来屏蔽错误。

Version Description 4.3.2 自 PHP 4.3.2
起，对所有区别二进制和文本模式的平台默认模式都被设为二进制模式。如果在升级后脚本碰到问题，尝试暂时使用
't'
标记，直到所有的脚本都照以下所说的改为更具移植性以后。
4.3.2 增加了选项 'x' 和 'x+' 5.2.6 增加了选项 'c' 和 'c+'

|fopen| 例子

<?php >
  $handle = fopen("/home/rasmus/file.txt", "r");
  $handle = fopen("/home/rasmus/file.gif", "wb");
  $handle = fopen("http://www.example.com/", "r");
  $handle = fopen("ftp://user:password@example.com/somefile.txt", "w");
?>





When using SSL, Microsoft IIS will violate the protocol by closing the
connection without sending a close_notify indicator. PHP will report this as
"SSL: Fatal Protocol Error" when you reach the end of the data. To work around
this, the value of error_reporting should be lowered to a level that does not
include warnings. PHP 4.3.7 and higher can detect buggy IIS server software
when you open the stream using the https:// wrapper and will suppress the
warning. When using |fsockopen| to create an ssl:// socket, the developer is
responsible for detecting and suppressing this warning.

When safe mode is enabled, PHP checks whether the directory in which the
script is operating has the same UID (owner) as the script that is being
executed.

如果在用服务器模块版本的 PHP
时在打开和写入文件上遇到问题，记住要确保所使用的文件和目录是服务器进程所能够访问的。

This function may also succeed when {filename} is a directory. If you are
unsure whether {filename} is a file or a directory, you may need to use the
|is_dir| function before calling |fopen|.

|fclose| |fgets| |fread| |fwrite| |fsockopen| |file| |file_exists|
|is_readable| |stream_set_timeout| |popen| |stream_context_create| |umask|
SplFileObject

vim:ft=help:
