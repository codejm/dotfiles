sort -- 对数组排序

  bool sort(array array [, int sort_flags])~

本函数对数组进行排序。当本函数结束时数组单元将被从最低到最高重新安排。

{array} 要排序的数组。

{sort_flags} 可选的第二个参数 {sort_flags}
可以用以下值改变排序的行为：

排序类型标记： SORT_REGULAR - 正常比较单元（不改变类型）

SORT_NUMERIC - 单元被作为数字来比较

SORT_STRING - 单元被作为字符串来比较

SORT_LOCALE_STRING -
根据当前的区域（locale）设置来把单元当作字符串比较，可以用
|setlocale| 来改变。

SORT_NATURAL - 和 |natsort|
类似对每个单元以“自然的顺序”对字符串进行排序。 PHP
5.4.0 中新增的。

SORT_FLAG_CASE - 能够与 SORT_STRING 或 SORT_NATURAL 合并（OR
位运算），不区分大小写排序字符串。

Returns TRUE on success or &false; on failure.

|sort| 例子

<?php >
  $fruits = array("lemon", "orange", "banana", "apple");
  sort($fruits);
  foreach ($fruits as $key => $val) {
      echo "fruits[" . $key . "] = " . $val . "\n";
  }
?>

The above example will output:

  fruits[0] = apple
  fruits[1] = banana
  fruits[2] = lemon
  fruits[3] = orange



fruits 被按照字母顺序排序。

使用不区分大小写自然排序的 |sort| 例子

<?php >
  $fruits = array(
      "Orange1", "orange2", "Orange3", "orange20"
  );
  sort($fruits, SORT_NATURAL | SORT_FLAG_CASE);
  foreach ($fruits as $key => $val) {
      echo "fruits[" . $key . "] = " . $val . "\n";
  }
?>

The above example will output:

  fruits[0] = Orange1
  fruits[1] = orange2
  fruits[2] = Orange3
  fruits[3] = orange20



fruits 排序得像 |natcasesort| 的结果。

This function assigns new keys to the elements in {array}. It will remove any
existing keys that may have been assigned, rather than just reordering the
keys.

和大多数 PHP 排序函数一样，|sort| 使用了 Quicksort 实现的。

在对含有混合类型值的数组排序时要小心，因为 |sort|
可能会产生不可预知的结果。

|asort| The comparison of array sorting functions

vim:ft=help:
