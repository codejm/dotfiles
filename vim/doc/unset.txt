unset -- 释放给定的变量

  void unset(mixed var [, mixed ...])~

|unset| 销毁指定的变量。

|unset|
在函数中的行为会依赖于想要销毁的变量的类型而有所不同。

如果在函数中 |unset|
一个全局变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用
|unset| 之前一样的值。

<?php >
  function destroy_foo() {
      global $foo;
      unset($foo);
  }
  
  $foo = 'bar';
  destroy_foo();
  echo $foo;
?>

The above example will output:

  bar

如果您想在函数中 |unset| 一个全局变量，可使用 $GLOBALS
数组来实现：

<?php >
  function foo() 
  {
      unset($GLOBALS['bar']);
  }
  
  $bar = "something";
  foo();
?>

如果在函数中 |unset|
一个通过引用传递的变量，则只是局部变量被销毁，而在调用环境中的变量将保持调用
|unset| 之前一样的值。

<?php >
  function foo(&amp;$bar) {
      unset($bar);
      $bar = "blah";
  }
  
  $bar = 'something';
  echo "$bar\n";
  
  foo($bar);
  echo "$bar\n";
?>

The above example will output:

  something
  something

如果在函数中 |unset|
一个静态变量，那么在函数内部此静态变量将被销毁。但是，当再次调用此函数时，此静态变量将被复原为上次被销毁之前的值。

<?php >
  function foo()
  {
      static $bar;
      $bar++;
      echo "Before unset: $bar, ";
      unset($bar);
      $bar = 23;
      echo "after unset: $bar\n";
  }
  
  foo();
  foo();
  foo();
?>

The above example will output:

  Before unset: 1, after unset: 23
  Before unset: 2, after unset: 23
  Before unset: 3, after unset: 23

{var} 要销毁的变量。

{...} 其他变量……

No value is returned.

Version Description 4.0.1 添加了多个参数的支持。

|unset| 示例

<?php >
  // 销毁单个变量
  unset ($foo);
  
  // 销毁单个数组元素
  unset ($bar['quux']);
  
  // 销毁一个以上的变量
  unset($foo1, $foo2, $foo3);
?>



使用 (unset) 类型强制转换 (unset) 类型强制转换常常和函数
|unset| 引起困惑。 为了完整性，(unset) 是作为一个 NULL
类型的强制转换。它不会改变变量的类型。

<?php >
  $name = 'Felipe';
  
  var_dump((unset) $name);
  var_dump($name);
?>

The above example will output:

  NULL
  string(6) "Felipe"



Because this is a language construct and not a function, it cannot be called
using variable functions.

It is possible to unset even object properties visible in current context.

在 PHP 5 之前无法在对象里销毁 $this。

在 |unset| 一个无法访问的对象属性时，如果定义了 __unset()
则对调用这个重载方法。

|isset| |empty| __unset() |array_splice|

vim:ft=help:
