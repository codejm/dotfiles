array_diff_uassoc --
用用户提供的回调函数做索引检查来计算数组的差集

  array array_diff_uassoc(array array1, array array2 [, array ..., callable key_compare_func])~

对比了 {array1} 和 {array2} 并返回不同之处。 注意和
|array_diff| 不同的是键名也用于比较。

和 |array_diff_assoc|
不同的是使用了用户自定义的回调函数，而不是内置的函数。

{array1} 待比较的数组

{array2} 和这个数组进行比较

{...} 更多比较的数组

{key_compare_func} The comparison function must return an integer less than,
equal to, or greater than zero if the first argument is considered to be
respectively less than, equal to, or greater than the second.

  int (array array1, array array2 [, array ..., callable key_compare_func, mixed a, mixed b])~

返回一个 array，该数组包括了所有在 {array1}
中但是不在任何其它参数数组中的值。

|array_diff_uassoc| 例子 上面的例子中 "a" => "green"
出现在两个数组中因此不在函数的输出中。但是 0 => "red"
却在输出中，因为第二个参数中的 "red" 的键名是 1。

<?php >
  function key_compare_func($a, $b)
  {
      if ($a === $b) {
          return 0;
      }
      return ($a > $b)? 1:-1;
  }
  
  $array1 = array("a" => "green", "b" => "brown", "c" => "blue", "red");
  $array2 = array("a" => "green", "yellow", "red");
  $result = array_diff_uassoc($array1, $array2, "key_compare_func");
  print_r($result);
?>

The above example will output:

  Array
  (
      [b] => brown
      [c] => blue
      [0] => red
  )

The equality of 2 indices is checked by the user supplied callback function.





注意本函数只检查了多维数组中的一维。当然可以用
array_diff_uassoc($array1[0], $array2[0], "key_compare_func");
检查更深的维度。

|array_diff| |array_diff_assoc| |array_udiff| |array_udiff_assoc|
|array_udiff_uassoc| |array_intersect| |array_intersect_assoc|
|array_uintersect| |array_uintersect_assoc| |array_uintersect_uassoc|

vim:ft=help:
