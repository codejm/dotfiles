file_get_contents -- 将整个文件读入一个字符串

  string file_get_contents(string filename [, bool use_include_path [, resource context [, int offset [, int maxlen]]]])~

和 |file| 一样，只除了 |file_get_contents|
把文件读入一个字符串。将在参数 {offset}
所指定的位置开始读取长度为 {maxlen}
的内容。如果失败，|file_get_contents| 将返回 FALSE。

|file_get_contents|
函数是用来将文件的内容读入到一个字符串中的首选方法。如果操作系统支持还会使用内存映射技术来增强性能。

如果要打开有特殊字符的 URL
（比如说有空格），就需要使用 |urlencode| 进行 URL 编码。

{filename} 要读取的文件的名称。

{use_include_path} As of PHP 5 the FILE_USE_INCLUDE_PATH can be used to
trigger include path search.

{context} A valid context resource created with |stream_context_create|.
如果你不需要自定义 context，可以用 NULL 来忽略。

{offset} The offset where the reading starts on the original stream.

Seeking ({offset}) is not supported with remote files. Attempting to seek on
non-local files may work with small offsets, but this is unpredictable because
it works on the buffered stream.

{maxlen} Maximum length of data read. The default is to read until end of file
is reached. Note that this parameter is applied to the stream processed by the
filters.

The function returns the read data or FALSE on failure.

An E_WARNING level error is generated if either {maxlength} is less than zero,
or if seeking to the specified {offset} in the stream fails.

Get and output the source of the homepage of a website

<?php >
  $homepage = file_get_contents('http://www.example.com/');
  echo $homepage;
?>



Searching within the include_path

<?php >
  // <= PHP 5
  $file = file_get_contents('./people.txt', true);
  // > PHP 5
  $file = file_get_contents('./people.txt', FILE_USE_INCLUDE_PATH);
?>



Reading a section of a file

<?php >
  // Read 14 characters starting from the 21st character
  $section = file_get_contents('./people.txt', NULL, NULL, 20, 14);
  var_dump($section);
?>

The above example will output something similar to:

  string(14) "lle Bjori Ro"

Using stream contexts

<?php >
  // Create a stream
  $opts = array(
    'http'=>array(
      'method'=>"GET",
      'header'=>"Accept-language: en\r\n" .
                "Cookie: foo=bar\r\n"
    )
  );
  
  $context = stream_context_create($opts);
  
  // Open the file using the HTTP headers set above
  $file = file_get_contents('http://www.example.com/', false, $context);
?>





Version Description 5.1.0 Added the {offset} and {maxlen} parameters. 5.0.0
Added context support.

This function is binary-safe.

A URL can be used as a filename with this function if the fopen wrappers have
been enabled. See |fopen| for more details on how to specify the filename. See
the for links to information about what abilities the various wrappers have,
notes on their usage, and information on any predefined variables they may
provide.

When using SSL, Microsoft IIS will violate the protocol by closing the
connection without sending a close_notify indicator. PHP will report this as
"SSL: Fatal Protocol Error" when you reach the end of the data. To work around
this, the value of error_reporting should be lowered to a level that does not
include warnings. PHP 4.3.7 and higher can detect buggy IIS server software
when you open the stream using the https:// wrapper and will suppress the
warning. When using |fsockopen| to create an ssl:// socket, the developer is
responsible for detecting and suppressing this warning.

|file| |fgets| |fread| |readfile| |file_put_contents| |stream_get_contents|
|stream_context_create| $http_response_header

vim:ft=help:
